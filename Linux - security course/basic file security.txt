PERMISSIONS OF FILES AND DIRECTORIES CAN CREATE SECURITY ISSUES, SO BEWARE OF PROVIDING PROPER PERMISSIONS TO PROPER USERS
IN THE PERMISSION SPECIFICATIONS, THE FIRST CHARACTER IS EITHER A '-', MEANING A REGULAR FILE, A 'd' FOR DIRECTORY OR A 'l' FOR SYMBOLIC LINK
READ, WRITE AND EXECUTE HAVE DIFFERENT MEANINGS FOR FILES AND DIRECTORIES: FOR FILES IT IS SELF-EXPLANATORY, FOR DIRECTORIES IT MEANS THAT NAMES OF THE ENTRIES CAN(NOT) BE READ, ENTRIES CAN(NOT) BE MODIFIED AND METADATA (SUCH AS OWNER OR DATE CREATED) CAN(NOT) BE ACCESSED 
IT CAN HAPPEN THAT THE FILE PERMISSIONS ARE SUCH THAT IT COULD HAVE BEEN MODIFIED, THE PERMISSIONS ON THE DIRECTORY ITSELF HOWEVER CAN PROHIBIT THIS
PERMISSIONS ARE LISTED IN ORDER OF USER-GROUP-OTHER
GROUPS CAN BE CREATED AND MANAGED BY ROOT, SEE YOUR CURRENT GROUPS WITH 'groups', OR OTHER USER'S GROUPS WITH 'groups [USER NAME]'
PERMISSIONS ARE ALSO CALLED 'MODES' (HENCE 'chmod'); COMMAND 'chmod' CAN BE USED WITH USERS, GROUPS, OTHERS OR ALL ('ugoa')
FOR CHANGING THE GROUP THE FILE BELONGS TO, USE 'chgrp [GROUP TO CHANGE TO] [FILE NAME]'
FOR CHANGING THE DEFAULT PERMISSION THAT IS SET TO A FILE (EVEN PER USER), USE 'umask'
CHANGING THE MASK FOR USERS ALSO USES USER-GROUPS-OTHER TO NOTATE THE PERMISSIONS, HOWEVER, SPECIALS MODES EXIST AND CAN ALSO BE CHANGED, SO THAT THE ORDER BECOMES: SPECIAL MODES-USERS-GROUPS-OTHER; SPECIAL MODES ARE: 'setuid', 'setgid' AND 'sticky'
WHENEVER PROCESSES START, THEY START WITH USER AND GROUP ID'S, HOWEVER 'setuid' CAN CHANGE THE USER ID WHEN THE FILE IS RUN (SINCE SOME FILES CAN BE RUN AS OTHER USERS, BUT WOULD ACTUALLY NEED ROOT PRIVILAGE TO EXECUTE WELL, FOR EXAMPLE); THIS OPTION IS ONLY AVAILABLE FOR BINARY FILES, NOT FOR SHELL SCRIPTS
THE ORDER OF 'setuid', 'setgid' AND 'sticky' IS HONORED ALSO IN 'chmod', MEANING THAT ALSO THE PREPENDING NUMBER WILL USE EITHER OCTAL NOTATION (FOR EXAMPLE: chmod 4755) OR SYMBOLIC NOTATION (FOR EXAMPLE: chmod u+s, chmod g+s OR chmod o+t)
THE STICKY BIT ALLOWS ONLY THE USER OR THE ROOT TO MODIFY OR DELETE THAT FILE

NEXT TO PERMISSIONS, SOME FILES SUPPORT EXTENDED ATTRIBUTES
AN EXAMPLE IS THE 'IMMUTABLE'-ATTRIBUTE, WHICH PREVENTS IT FROM BEING MODIFIED, EVEN BY ROOT
ANOTHER EXAMPLE IS THE 'APPEND'-ATTRIBUTE, WHICH FORCES NEW INFORMATION TO BE ADDED, BUT PREVENTS DELETION AND OTHER MODIFICATIONS (HANDY FOR LOG-FILES, FOR EXAMPLE)
VIEWING ATTRIBUTES CAN BE DONE WITH 'lsattr', CHANGING ATTRIBUTES CAN BE DONE WITH 'chattr'

ACCESS CONTROL LIST (ACL) PROVIDES ADDITIONAL CONTROL OVER THE ACCESS OF FILES, CLASSICALLY THIS IS DONE WITH ADDING GROUPS AND CHANGING GROUP PERMISSIONS, HOWEVER, SOMETIMES A SINGLE USER ONLY NEEDS ACCESS TO A SINGLE FILE, BUT NOT THE OTHER FILES OF THE GROUP, THEN AN ACL IS USED

A ROOTKIT IS A FOREIGN PIECE OF SOFTWARE THAT HAS ROOT ACCESS INCONSPICUOUSLY, THIS CAN BE EITHER USER BASED (REPLACING COMMON COMMANDS, FOR EXAMPLE) OR KERNEL BASED (REPLACE PART OF THE CORE OPERATING SYSTEM, WHICH IS HARDER TO SPOT)
THERE IS SOFTWARE AVAILABLE TO CHECK FOR ROOTKITS ON A SYSTEM
