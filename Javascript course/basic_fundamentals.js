// JAVASCRIPT OBJECT-ORIENTED AND EVENT-BASED!

// IN YOUR BROWSER (OR OTHER JAVASCRIPT ENVIRONMENT) THERE IS A JAVASCRIPT INTERPRETER
// THIS CONSISTS OF:
// - A PARSER (CHECKS THE SYNTAX), PRODUCES ABSTRACT SYNTAX TREE
// - MACHINE CODE CONVERTER, PRODUCES MACHINE CODE

// EXECUTION CONTAINER/EXECUTION CONTEXT OBJECT OR ENVIRONMENTS IS BY DEFAULT THE GLOBAL CONTEXT/GLOBAL OBJECT/WINDOW OBJECT
// THE EXECUTION CONTEXT OBJECT CONSISTS OF:
// - VARIABLE OBJECT: VARIABLE/FUNCTION DECLARATIONS AND ANY GIVEN ARGUMENTS
// - SCOPE CHAIN: CONTAINS CURRENT VARIABLE OBJECTS AND THE VARIABLE OBJECTS OF ALL ITS PARENTS
// - THIS-VARIABLE: A NOTION OF 'SELF' OF THE OBJECT

// WHENEVER A FUNCTION (OBJECT) IS CALLED, THE FOLLOWING HAPPENS:
// - THE VARIABLE OBJECTS ARE CREATED:
//     AN ARGUMENT-OBJECT IS CREATED THAT STORES ALL THE ARGUMENTS
//     FOR EVERY FUNCTION DECLARATION, A PROPERTY IS CREATED IN THE VARIABLE OBJECT POINTING TOWARDS THAT THE ACTUAL FUNCTION, SO THEY ARE DEFINED (HOISTING)
//     FOR EVERY VARIABLE DECLARATION, A PROPERTY IS CREATED IN THE VARIABLE OBJECT POINTING AND SET TO 'UNDEFINED' (HOISTING)
//     [HOISTING: EVERYTHING THAT IS DECLARED IS AVAILABLE BEFORE ITS ACTUAL EXECUTION, WHICH MEANS YOU CAN ACTUALLY EXECUTE A FUNCTION BEFORE ITS IS DECLARED (NOT FUNCTIONS WITH A FUNCTION EXPRESSION, SINCE THEN IT IS TREATED A VARIABLE)! THIS IS NOT POSSIBLE WITH VARIABLES]
// - THE SCOPE CHAIN IS CREATED:
//     SCOPE IS ENVIRONMENT IN WHERE CERTAIN VARIABLES OR FUNCTIONS ARE ACCESSIBLE
//     THE ONLY WAY IN JAVASCRIPT TO CREATE A NEW SCOPE IS WITH FUNCTIONS AND OTHER OBJECTS, NOT WITH LOOPS SUCH AS PYTHON OR OTHER LANGUAGES
//     THE ACCESS TO VARIABLES IS HIERARCHICAL (YOU GET ACCESS TO SCOPE OF OUTER FUNCTIONS/OBJECTS), CREATING A 'CHAIN'
//     THIS CRASHES IN CASE SCOPE IS INCORRECT
// - THE THIS-VARIABLE IS CREATED
//     THE THIS-VARIABLE IS ONLY ASSIGNED A VALUE WHEN THE FUNCTION IS ACTUALLY CALLED
//     THE THIS-VARIABLE IS GIVEN THE VALUE OF GLOBAL/WINDOW FOR REGULAR FUNCTIONS, AND OF THE ENCAPSULATING OBJECT FOR METHODS 

// FOR GENERAL OBJECTS, THE HEAP IS USED TO STORE THEM, SINCE IN OBJECT ORIENTED LANGUAGES IT IS NOT AT ALL CLEAR WHEN THE CONTEXT OF THE OBJECT WILL BE DESTROYED, UNLIKE FUNCTIONS, OF WHICH THE LINK TO THE CONTEXT WILL BE DESTROYED ONCE THEY RETURN (NOT THE CONTENT, SINCE THIS IS STILL INTACT AND CAN BE USED BY ENCLOSED FUNCTIONS BY MEANS OF CLOSURE: THE SCOPE CHAIN STAYS INTACT FOR THESE FUNCTIONS)

// FOR THE DURATION OF THE EXECUTION OF THESE INCAPSULATED CONTAINERS, THESE CONTAINERS 'STACK', GIVING AN EXECUTION STACK. THIS STACK IS EVALUATED TOP-DOWN