MAPREDUCE DESIGNED BY GOOGLE, SPARK BUILT INSTEAD/ON TOP OF THAT, SINCE BATCH PROGRAMMING CANNOT BE USED FOR EVERYTHING AND IT WAS DIFFICULT TO LEARN
THERE ARE OTHER LIBRARIES THAT ARE BUILT ON TOP OF HADOOP TO ADDRESS THE NEED FOR OTHER JOBS NEXT TO BATCH JOBS, HOWEVER THIS PRODUCED OVERHEAD
SPARK HAS NO OVERHEAD AND IS TIGHTLY CODED

MAPREDUCE IS SOMETIMES TOO SLOW AND LEARNING IT IS DIFFICULT -> SPARK
SPARK: GENERAL PRUPOSE, FAST, EASY TO USE

SPEED: IN-MEMORY COMPUTATIONS; ALLOWS FOR GREATER SPEED 
GENERAL PURPOSE: IN-MEMORY ALSO ALLOWS FOR BATCH (MAPREDUCE) AS ITERATIVE JOBS
EASY TO LEARN: API'S FOR JAVA, SCALA AND PYTHON

SPARK CAN HAVE ITS OWN SCHEDULAR, BUT ALSO RUNS WITH YARN OR APACHE MESOS
THE SPARK UNIFIED STACK HAS OWN SCHEDULAR OR YARN OR MESOS; THE SPARK CORE; SPARK LIBRARIES FOR SPECIFIC CASES: SPARK SQL (VIA SQL AND HIVE QL), MLLIB (MACHINE LEARNING LIBRARY), GRAPHX (GRAPH PROCESSING LIBRARY), SPARK STREAMING (API CLOSELY RESEMBLES THAT OF THE SPARK CORE, SO THAT IT IS EASY TO SWITCH BETWEEN STATIC AND RUNNING DATA; HAS SAME THROUGHPUT, SCALABILITY AND FAULT TOLERANCE AS THE CORE) 
SPARK CORE: DITRIBUTES AND MONITORING OF APPLICATIONS (HAS OWN BUILT-IN SCHEDULAR IN CASE IT DOES NOT RUN ON TOP OF YARN OR MESOS) 
SPARK CORE: RESILIENT DISTRIBUTED DATASET (RDD)
THERE ARE TWO TYPES OF RDD OPERATIONS: TRANSFORMATION (DO NOT RETURN A VALUE) AND ACTIONS (DO RETURN A VALUE)
SPARK CREATES DIRECTED ACYCLIC GRAPHS (DAG) AND ONLY EVALUATES DURING RUNTIME (LAZY EVALUATION); SINCE EVALUATION IS LAZY, THE DAG NEEDS TO BE STORED, WHICH MAKES IT FAULT INTOLERANT, SINCE THE PROCESS CAN CONTINUE (OR BE TRACKED TO HAVE BEEN BROKEN DOWN AT A SPECIFIC POINT) AS SOON AS THE NODE COMES BACK ONLINE
CACHING MAKES IT POSSIBLE THAT ALL OPERATIONS HAPPEN WITHIN MEMORY, IF IT DOES NOT FIT, IT WILL SPILL TO DISK

LIKE MAPREDUCE, SPARK CREATES PARALLEL DISTRIBUTED PROCESSING, FAULT TOLERANCE AND SCALABILITY
SPARK, HOWEVER, ADDS AGGRESSIVELY CACHED IN-MEMORY COMPUTATIONS, LOW LATENCY AND EASY API'S

TO USE SPARK: DOWNLOAD SPARK LOCALLY AND PLACE COMPILED VERSION ON EACH NODE OF THE CLUSTER
SPARK SHELLS ARE AVAILABLE FOR SCALA OR PYTHON
WITHIN THE CLUSTER, ONE MUST MAKE SURE TO HAVE A COMPATIBLE VERSION OF THE PROGRAMMING LANGUAGE WITHIN THAT CLUSTER (PYTHON, SCALA OR JAVA, THAT IS)
SPARK IS WRITTEN IN SCALA, SO SCALA IS HIGHLY COMPATIBLE WITH SPARK

ALL PRIMITIVE TYPES ARE OBJECTS IN SCALA/SPARK (INT, FLOAT, FUNCTIONS, ETC.)
LAMBDA FUNCTIONS ARE VERY COMMON WITHIN SPARK
