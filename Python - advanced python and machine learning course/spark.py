# DIFFERENCE LOCAL VERSUS DISTRIBUTED SYSTEMS: LOCAL TO RAM ONE COMPUTER, OR DISTRIBUTED OVER MULTIPLE COMPUTERS
# DISTRIBUTED NETWORK HAS ADVANTAGES THAT IT SCALES EASILY (ADD COMPUTER) AND THAT IT IS FAULT TOLERANT (ONE COMPUTER FAILS, REST CAN CONTINUE)

# HADOOP IS A TECHNIQUE OF DISTRIBUTING FILES OVER MUTLIPLE SYSTEMS (HADOOP DISTRIBUTED FILE SYSTEM), WITH DUPLICATES DATA FOR FAULT TOLERANCE
# MAPREDUCE ALLOWS FOR COMPUTATIONS ON DISTRIBUTED DATA
# THIS IS DONE VIA JOB TRACKERS (WHICH SENDS THE ASSIGMMENT, IS ON MAIN NODE) AND 
#     TASK TRACKERS (ALLOCATE CPU AND MEMORY FOR THE TASKS AND MONITOR TASKS ON THE WORKER NODES)
# USE HDFS TO DISTRIBUTE DATA AND MAPREDUCE TO DISTRIBUTE TASKS

# SPARK IS ANOTHER WAY OF DISTRIBUTING TASKS, LIKE MAPREDUCE
# SPARK IS BASED ON SCALA, WHICH IS BASED ON JAVA
# HOWEVER, SPARK DOES NOT REQUIRE HDFS TO OPERATE (ALSO OTHER DATA DISTRIBUTING TECHNIQUES CAN BE UTILIZED, SUCH AS CASSANDRA)
# IS FASTER THAN MAPREDUCE, SINCE THERE AFTER EVERY MAP AND REDUCE THE DATA IS WRITTEN TO DISK, WHEREAS SPARK WRITES IT TO MEMORY
# SPARK CAN SWITCH OVER TO DISK IF MEMORY INSUFFICIENT
# CORE OF SPARK IS RESILIENT DISTRIBUTED DATASET (RDD):
#     - DISTRIBUTED COLLECTION OF DATA
#     - FAULT TOLERANT
#     - PARALLEL OPERATION
#     - ABILITY TO USE MANY DATA SOURCES
# THE OPERATIONS ARE LAZY AND CACHEABLE, OF WHICH ARE TWO TYPES:
#     - TRANSFORMATIONS:
#         - FILTER: APPLIES FUNCTION TO EACH RDD-ELEMENT AND RETURNS ELEMENTS THAT RETURN 'TRUE'
#         - MAP: APPLIES FUNCTION TO EACH ELEMENT
#         - FLATMAP: APPLIES FUNCTION TO EACH ELEMENT, RETURNS 'FLAT' ARRAY (E.G.: RETURNS WORDS OF FULL SENTENCES)
#         - REDUCE: AGGREGATING RDD'S IN ORDER TO RETURN SINGLE VALUE
#         - REDUCEBYKEY: AGGREGATING PAIR RDD ELEMENTS (OF TUPLE-FORM) INTO PAIR RDD (DOING AN OPERATION ON THE VALUES, WHERE KEY OVERLAPS)
#         - SAMPLE: CREATE A SAMPLE OF ELEMENTS FROM THE RDD
#         - UNION: APPEND EXISTING RDD WITH OTHER RDD
#         - DISTINCT: REMOVE DUPLICATE ELEMENTS IN RDD
#         - SORTBY: SORT ELEMENTS IN ASCENDING OR DESCENDING ORDER, OR BY A DEFINED FUNCTION
#     - ACTIONS: 
#         - FIRST: RETURN FIRST ELEMENT IN RDD
#         - COUNT: RETURN NUMBER OF ELEMENTS OR RDD
#         - COLLECT: RETURN ALL ELEMENTS OF RDD AS ARRAY AT DRIVER PROGRAM
#         - TAKE: RETURN ARRAY OF FIRST N ELEMENTS OF RDD
#         - COLLECT: CONVERT RDD TO IN-MEMORY LIST
#         - TOP: TOP 3 ELEMENTS OF RDD
#         - SUM/MEAN/STDEV: SUM/MEAN/STANDARD DEVIATION
#         - TAKESAMPLE: CREATE A SAMPLE OF N ELEMENTS OF RDD
# OFTEN RDD'S HOLD THEIR VALUES IN TUPLES (KEY, VALUE)
# POSSIBILITY SPARK VIA AMAZON WEB SERVICES

# FOR USING SPARK TOGETHER WITH PYTHON, USE PYSPARK, CREATE SparkContext() INSTANCE, CREATE RDD-OBJECT (SparkContext().textFile('DURK.txt') OR 
#     SparkContext().parallellize('array')) AND PERFORM TRANSFORMATIONS OR ACTIONS ON THIS OBJECT (SparkContext().textFile('DURK.txt').count())