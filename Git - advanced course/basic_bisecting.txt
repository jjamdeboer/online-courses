BISECTING IS THE PROCESS OF FINDING THE COMMIT WHERE A BUG/SOME CODE WAS INTRODUCED
THE BASIS IS THE BINARY SEARCH: TAKE ONE CORRECT COMMIT AND ONE INCORRECT COMMIT, THEN STUDY THE COMMIT HALFWAY BETWEEN THOSE COMMITS; IT CAN BE EITHER CORRECT OR INCORRECT AND THE PROCESS CAN BE REPEATED WITH EITHER THE CORRECT OR INCORRECT BOUNDARY MOVED TO THE NEW HALFWAY COMMIT, ETC.

TO START THE PROCESS, USE: git bisect start
TO MARK THE CURRENT HEAD AS THE 'BAD' BOUNDARY, USE: git bisect bad
TO MARK THE CURRENT HEAD AS THE 'GOOD' BOUNDARY, USE: git bisect good
WHAT HAPPENS IS THAT THIS IMMEDIATELY TAKES ONE TO THE COMMIT IN BETWEEN, WHERE IT CAN BE CHECKED WHETHER THIS IS A GOOD OR A BAD BOUNDARY, SO REPEAT git bisect good/bad UNTIL THE DESIRED POINT

IF ONE WANTS TO STOP THE BISECTING, BUT STORE THE PROCESS, USE: git bisect log > [FILENAME WHERE THE BISECT LOG WILL BE KEPT]
TO STOP THE BISECTING, USE: git bisect reset
TO RESTART BISECTING, USE: git replay [FILENAME WHERE THE BISECT LOG WAS KEPT]
TO AUTOMATICALLY TEST SOMETHING AT EACH BISECTION, USE A SCRIPT AT EVERY STEP: git bisect run [NAME OF THE SCRIPT TO BE USED, FOR EXAMPLE: ./check_background_color.sh]
