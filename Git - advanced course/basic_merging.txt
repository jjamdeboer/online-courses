IN CASE THE BRANCH ONE IS MERGING TO IS AN UNCHANGED ANCESTOR OF THE BRANCH ONE IS MERGING, A FAST-FORWARD MERGE IS USED: git merge [NAME OF BRANCH TO BE MERGED IN CURRENT BRANCH]
MERGING MOVES THE CURRENT COMMIT FOR THE BRANCH TO CURRENT COMMIT OF THE CURRENT BRANCH, ALSO ADDING THE HISTORIES

HOWEVER, IN CASE THE TWO BRANCHES INDEPENDENTLY DEVELOPED AHEAD, A THREE-WAY MERGE MUST HAPPEN:
(IN THIS CASE, THE FAST-FORWARD CANNOT BE USED, SINCE THIS WOULD DISPOSE OF ALL THE CHANGES THAT HAPPENED IN ONE OF EITHER BRANCHES)
- FIND A COMMON ANCESTOR (COMMIT) OF BOTH BRANCHES
- MERGE ONE OF THE TWO BRANCHES IN A FAST FORWARD WAY WITH THIS ANCESTOR
- MERGE THE OTHER BRANCH WITH THIS MERGED BRANCH
THIS IS DONE AUTOMATICALLY WITH THE git merge COMMAND, BUT THIS CAN CAUSE CONFLICTS IF TWO BRANCHES HAVE BEEN WORKING ON THE SAME FILES
ONE SOLUTION IS TO LEAVE THE MASTER BRANCH UNCHANGED AND ONLY DEVELOP ON OTHER BRANCHES
IN CASE MERGING GIVES CONFLICT, A STRATEGY COULD BE TO STOP THE CURRENT MERGING AND USE A DIFFERENT STRATEGY FOR MERGING (SEE BELOW): git merge --abort
ANOTHER FILE (basic_conflicts.txt) IS ALSO DEDICATED TO THE SUBJECT OF MERGING CONFLICTS

HOWEVER, CONFLICTS MIGHT STILL ARISE, AND DIFFERENT STRATEGIES FOR MERGING CAN BE USED, ACTIVATED WITH PREFIX -s: git merge -s [STRATEGY, SEE BELOW] -X [OPTIONS FOR THAT PARTICULAR STRATEGY]
STRATEGIES FOR MERGING MIGHT BE:
-s resolve (THREE-WAY MERGE, CONSIDERED SAFE)
-s recursive (DEFAULT, ALMOST THE SAME, USES ANOTHER METHOD IF THERE ARE MULTIPLE COMMON ANCESTORS OF THE MERGING BRANCHES)
    -X ours (IN CASE OF CONFLICT, KEEP CURRENT BRANCH' VERSION)
    -X theirs (IN CASE OF CONFLICT, KEEP OTHER BRANCH' VERSION)
    -X patience (IN CASE THE BRANCHES DIVERGE WILDLY, EXTRA TIME IS DEDICATED TO EXAMINING THE FILES)

IT IS POSSIBLE TO SIGN COMMITS AND MERGES WITH A PRIVATE KEY. PROBABLY HANDY FOR SUPERSECRET PROJECTS
