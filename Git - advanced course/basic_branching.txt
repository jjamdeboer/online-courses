A BRANCH IS A LABEL THAT IS ASSIGNED TO THE COMMITS
THE HEAD IS ALWAYS THE CURRENT COMMIT FOR THE CURRENT BRANCH, BUT CAN BE POINTED TO ANY PREVIOUS COMMIT AS WELL WITH CHECKOUT
TO GIVE A COMMIT A SPECIFIC NAME, NEXT TO HEAD AND THE CURRENT BRANCH NAME: git tag [NAME TO GIVE TO SPECIFIC COMMIT, NEXT TO BRANCH NAMES]
TO LIST ALL THE TAGS THAT ARE CREATED: git tag
WHEN BRANCHES ARE MERGED, ALSO THE COMMIT HISTORIES ARE ADDED TOGETHER

TO LIST ALL THE BRANCHES AVAILABLE (--list IS THE DEFAULT WHEN NO ARGUMENTS ARE GIVEN): git branch/git branch --list
TO SWITCH TO DIFFERENT BRANCH: git checkout [NAME BRANCH]
TO SWITCH TO DIFFERENT COMMIT (NOT NECESSARILY A BRANCH, SINCE IT MIGHT BE A PREVIOUS COMMIT): git checkout [COMMIT-ID, CAN BE SEEN USING git log, FOR EXAMPLE: 060fdf61c0baa1d9b107a6931e0e6b974f74ad64]
TO DELETE A BRANCH: git branch -D [NAME BRANCH]
FOR REMOVING BRANCH: git branch -d [NAME BRANCH] (LOCALLY)/git push origin --delete [NAME BRANCH] (REMOTELY)
TO RENAME CURRENT BRANCH: git branch -m "[NEW NAME BRANCH]" 

TO SEE WHICH BRANCHES ARE ALREADY/NOT MERGED/UP-TO-DATE: git branch --merge/no-merge
TO SEE WHICH BRANCHES HAVE A SPECIFIC COMMIT IN THEIR HISTORY: git branch --contains [COMMIT-ID, CAN BE SEEN USING git log, FOR EXAMPLE: 060fdf61c0baa1d9b107a6931e0e6b974f74ad64]

TO TRACK A SPECIFIC REMOTE BRANCH/LINK CURRENT BRANCH TO SPECIFIC REMOTE BRANCH: git branch -u [NAME REMOTE BRANCH, SUCH AS: origin/develop]
TO STOP TRACKING THE REMOTE BRANCH: git branch --unset-upstream
TO CREATE A REMOTE BRANCH WITH THE DESIRED NAME: git push --set-upstream [NAME REMOTE BASE, DEFAULT: origin] [NAME OF REMOTE BRANCH, FOR EXAMPLE: independent]
THE REMOTE BASE CAN BE DISCOVERED USING: git remote -v

TO RESET THE STATUS OF A BRANCH TO A PREVIOUS COMMIT: git reset --hard [COMMIT-ID, CAN BE SEEN USING git log, FOR EXAMPLE: 060fdf61c0baa1d9b107a6931e0e6b974f74ad64]
