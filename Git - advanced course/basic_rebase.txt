THE DIFFERENCE BETWEEN MERGE AND REBASE IS, THAT MERGING COMBINES TWO BRANCHES AND ADDS THE HISTORIES. REBASING PUTS ONE BRANCH 'BEFORE' THE FIRST COMMIT OF THE OTHER BRANCH, THUS CREATING A LINEAR HISTORY INSTEAD OF THE GRAPH-LIKE HISTORY OF MERGED BRANCHES
THE CHANGES THAT WERE APPLIED TO THE CURRENT BRANCH ARE THEN APPLIED ON TOP OF THE BRANCH THAT IS SET AS THE NEW BASE. THIS CAN LEAD TO CONFLICTS
TO REBASE THE CURRENT BRANCH (PUT ANOTHER BRANCH BEFORE THE FIRST COMMIT OF THE CURRENT BRANCH): git rebase [NAME OF OTHER BRANCH]
WHEN A DIFFICULT CONFLICT IS ENCOUNTERED, THE REBASING CAN BE STOPPED USING: git rebase --abort
IF THE CONFLICT IS RESOLVED AND THE PROCESS WAS NOT ABORTED, THEN THE REBASING CAN CONTINUE WHERE IT LEFT OFF: git rebase --continue
A DOWNSIDE OF REBASING IS, THAT CONFLICTS NEED TO BE RESOLVED FOR EVERY COMMIT IN THE HISTORY OF THE BRANCHES. THIS MIGHT TAKE A WHILE AND IS A DOWNSIDE COMPARED TO MERGING BRANCHES, WHERE CONFLICTS NEED TO BE RESOLVED ONLY ONCE
ONLY REBASE IF THESE CHANGES WERE NOT PUSHED YET!

FOR CHANGING THE HISTORY OF THE COMMITS, USE THE INTERACTIVE REBASE ENVIRONMENT: git rebase -i [COMMIT-ID, CAN BE SEEN USING git log, FOR EXAMPLE: 060fdf61c0baa1d9b107a6931e0e6b974f74ad64]
CHANGES THAT CAN BE APPLIED TO THE COMMIT HISTORY IS EDITING THE MESSAGE, SQUASHING MULTIPLE COMMITS, EDIT SOME FILES IN THAT COMMIT; ALL THESE OPTIONS WILL BE SHOWN IN THE INTERACTIVE REBASE ENVIRONMENT
ONE OPTION THAT IS NOT SHOWN IS CHANGING THE ORDER OF THE COMMITS, HOWEVER, THAT IS AS SIMPLE AS CHANGING THE ORDER OF THE COMMITS IN THE INTERACTIVE REBASE ENVIRONMENT
ALSO: ONLY DO THIS WHEN THESE COMMITS ARE NOT PUSHED YET!
