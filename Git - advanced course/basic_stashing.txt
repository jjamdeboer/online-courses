IN CASE CHANGES NEED TO BE STORED, BUT DON'T NEED TO BE COMMITED (YET):git stash save [MESSAGE, SUCH AS: "Really needed to stash this"]
THE REASON FOR THIS, IS THAT THE CURRENT FILES ARE NOT GOOD ENOUGH TO COMMIT (YET), BUT SOMETHING ELSE NEEDS TO BE DONE ON THE PROJECT IN THE MEANTIME (SUCH AS CHECKING PREVIOUS COMMITS OR SOMETHING ELSE STILL)
IN CASE SOME FILES ARE ALREADY IN THE STAGING AREA, STASHING REMOVES THOSE FILES THERE AND PUTS EVERYTHING BACK IN THE WORKING DIRECTORY. IN CASE THE STAGING AREA/INDEX NEEDS TO BE PRESERVED: git stash save --keep-index/-k
ONCE FILES ARE ADDED TO THE STAGING AREA, THE FILES BECOME TRACKED. IN CASE NEW/UNTRACKED FILES NEED TO BE STASHED TOO (NOT DONE BY DEFAULT): git stash --include-untracked/-u
TO LIST ALL THE STASH COMMITS: git stash list

TO REAPPLY THE PREVIOUS SAVED STASH: git stash pop
TO REAPPLY ANY PREVIOUS SAVED STASH: git stash apply [STASH ID, CAN BE SEEN USING git stash list, FOR EXAMPLE: 2]
NOTICE THAT: (git stash pop) == (git stash apply 0)

IN ORDER TO REAPPLY THE CHANGES TO DIFFERENT BRANCHES, JUST STASH EVERYTHING ONE NEEDS, SWITCH BRANCH AND THEN APPLY THE NEEDED STASH

TO RESET ALL THE CHANGES IN THE WORKING DIRECTORY AND THE STAGING AREA: git reset --hard

SEE ALL THE DIFFERENCES THAT ARE MADE SINCE LAST COMMIT: git diff
