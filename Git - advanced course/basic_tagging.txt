A TAG IS A NAME FOR A SPECIFIC COMMIT IN ORDER TO HIGHLIGHT A SPECIAL ACHIEVEMENT OR MOMENT
TO CREATE A TAG ON THE CURRENT BRANCH/HEAD: git tag "[NAME OF THE TAG, ALPHANUMERIC AND '.', FOR EXAMPLE: release5.6]"
TO CREATE A TAG ON A POINT IN HISTORY, SWITCH HEAD TO THAT POINT IN HISTORY AND THEN TAG, USING: git checkout [COMMIT-ID, CAN BE SEEN USING git log, FOR EXAMPLE: 060fdf61c0baa1d9b107a6931e0e6b974f74ad64]

THERE ARE TWO KINDS OF TAGS: LIGHTWEIGHT AND ANNOTATED
LEIGHTWEIGHT TAGS CONTAIN ONLY A NAME AND ARE THE STANDARD, ANNOTATED TAGS ALSO CONTAIN A MESSAGE, THE NAME OF THE AUTHOR, THE DATE AND MAYBE A SIGN
RECOMMENDED TO USE ANNOTATED TAGS IF PUSHED IN A REMOTE (PUBLIC) REPOSITORY
FOR ANNOTATED TAGS, THE SAME COMMAND IS USED WITH EXTRA OPTIONS: git tag "[NAME OF THE TAG, ALPHANUMERIC AND '.', FOR EXAMPLE: release5.6]" -m "[MESSAGE]

TO SHOW DETAILS OF TAG OR ANY OTHER COMMIT: git show "[NAME TAG OR COMMIT-ID]"

TO LIST ALL THE TAGS: git tag/git tag --list
TO DELETE A TAG: git tag -d "[NAME OF THE TAG]"
TO UPDATE A SPECIFIC TAG TO CURRENT HEAD: git tag -f "[NAME OF THE TAG]"
DO NOT CHANGE THE COMMIT OF THE TAGS THAT ARE ALREADY PUSHED, THIS CAN CREATE HAVOC

WHEN A REMOTE REPOSITORY IS FETCHED, THE TAGS ARE NOT FETCHED WITH IT. FOR THIS OPTION, TYPE: git fetch --tags
LIKEWISE, TAGS ARE NOT PUSHED, TO DO THIS, USE: git push --tags
