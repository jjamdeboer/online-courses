WHEN THERE ARE TWO REPOSITORIES, USING SUBPROJECTS OR SUBMODULES WITHIN A PROJECT CAN BE BENEFICIAL WHEN OTHER LANGUAGES ARE USED FOR THE PROJECTS OR THIRD-PARTY PROJECTS NEED TO BE INTEGRATED IN CURRENT PROJECT
THE NICE THING ABOUT A SUBMODULE IS, THAT THE CONTENT IS NOT ADDED OR COMMITTED, BUT ONLY THE SUBMODULE ITSELF, AS IF IT WHERE A MERE FILE; THE CONTENT OF THIS SUBMODULE NEEDS TO BE CHANGED WITHIN THAT MODULE

THE COMMAND FOR ADDING A SUBMODULE INSIDE THE MAIN PROJECTS IS: git add submodule [URL OF ONLINE REPOSITORY, SUCH AS: https://gitlab.com/AntoniusCollective/hello-online-repository.git]
WHEN A SUBMODULE IS CREATED, ALSO THE FILE .gitmodules IS AUTOMATICALLY CREATED
WHENEVER THERE IS A COMMIT FROM THE SUBMODULE, THE MAIN MODULE TRACKS THAT A CHANGE HAPPENED, SINCE THE SUBMODULE AS A WHOLE IS A TRACKED ENTITY
PULLING CAN BE DONE INDEPENDENTLY WITHIN ONLY THE SUBPROJECT
IF THE MAIN PROJECT IS FETCHED, THE SUBMODULE IS FETCHED AUTOMATICALLY, HOWEVER, TO UPDATE THE CURRENT SUBMODULE TO THE ONE JUST PULLED, USE: git submodule update
TO POINT TO THE HEAD OF THE EXTERNAL REPOSITORY THAT IS REFERENCED IN THE SUBMODULE, USE: git submodule update --remote

WHEN A PROJECT IS CLONED THAT HAS A SUBMODULE, THE CONTENT OF THE SUBMODULE IS NOT PULLED AUTOMATICALLY; FOR THIS, USE:
- git submodule init
- git submodule update
ANOTHER WAY TO DO THIS AUTOMATICALLY IS TO ADD THE --recursive-OPTION TO THE CLONE COMMAND: git clone [URL OF ONLINE REPOSITORY, SUCH AS: https://gitlab.com/AntoniusCollective/hello-online-repository.git] --recursive

SUBTREE ALSO EXISTS, WHICH IS LIKE A SUBMODULE, HOWEVER: SUBMODULES ARE ONLY LINKS TO EXTERNAL REPOSITORIES, WHEREAS SUBTREES REALLY ARE A COPY OF EXTERNAL REPOSITORIES FOR INTEGRATING THIS EXTERNAL REPOSITORY INTO THE CURRENT ONE
SUBTREES MAKE THE CURRENT PROJECT BIGGER, SUBMODULES KEEP THE PROJECT SPLIT INTO MULTIPLE PARTS
