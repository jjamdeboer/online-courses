REMOVE FILES/DIRECTORIES:
rm [-r (RECURSIVELY, NECESSARY FOR DIRECTORIES)] [-f (DON'T ASK QUESTIONS)]

COPY FILES:
cp [source ... destination] [-r (RECURSIVELY, NECESSARY WHEN source IS A DIRECTORY)] [-i (INTERACTIVE MODE: ASKS WHEN FILE DOES NOTE EXISTS YET, WHETHER TO CREATE IT)]
NOTE THAT source AND destination CAN BE EITHER FILE OR DIRECTORY
ALSO NOTE THAT IF destination DOES NOT EXIST YET, IT IS CREATED WITH COPIED CONTENT

MOVE OR RENAME:
mv [source ... destination]
NOTE THAT destination CAN OVERWRITE EXISTING FILES

SORT TEXT:
sort [filename] (ALPAHBETICALLY SORTS TEXT IN A FILE) [-r (REVERSE ORDE)] [-u (REMOVE DUPLICATE LINES)] [-k [field_number] (SORTS BASED ON field_number IN EVERY LINE, DEFAULT IS FIRST CHARACTER; FIELDS CAN BE SEPARATED BY SEMICOLONS FOR EXAMPLE)]

TO CREATE BACKUP:
tar [-c (CREATE TAR-ARCHIVE)] [-x (EXTRACT)] [-t (DISPLAY TABLE OF CONTENTS)] [-v (VERBOSE MODE)] [-z (USE COMPRESSION)] [-f [tar_file]] [file_or_directory_to_archive]

FOR (UN)COMPRESSING FILES AND/OR DIRECTORIES:
gzip (COMPRESS FILES AND/OR DIRECTORIES)
gunzip (UNCOMPRESS FILES AND/OR DIRECTORIES)
gzcat (LISTS OR CONCATENATES COMPRESSED FILES)
zcat (LISTS OR CONCATENATES COMPRESSED FILES)

SEE HOW MUCH SPACE SOMETHING USES:
du [-k (IN KILOBYTES)] [-h (HUMAN READABLE FORMAT)] [file_or_directory]

_______________________________________________________________________
WILDCARDS: A CHARACTER OR STRING USED FOR PATTERN MATCHING, SOMETIMES REFERRED TO AS GLOBS OR GLOB PAT/PATTERNS. GLOBBING IS THE PROCESS OF EXPANDING THE WILDCARD INTO ACTUAL FILE- OR DIRECTORY-NAMES
'*' MATCHES ZERO OR ANY KIND OF CHARACTER
'?' MATCHES ONE CHARACTER
IF ONE WANTS TO MATCH A FILE WITH '?' IN IT, USE \? TO MATCH FOR THIS.
CHARACTER CLASSES:
'[characters_to_match_with]' MATCHES WITH ANY CHARACTER INSIDE THE BRACKETS
'[!characters_not_to_match_with]' MATCHES WITH ANY CHARACTER NOT INSIDE THE BRACKETS
PREDEFINED CHARACTER CLASSES ARE: [[:alpha:]] (LOWER- AND UPPERCASE LETTERS), [[:alnum:]] (ALPHA-NUMERIC), [[:digit:]] (NUMBERS 0-9), [[:lower:]] (LOWERCASE LETTERS), [[:space:]] (SPACES) AND [[:upper:]] (UPPERCASE LETTERS)
WHEN USING CHARACTER CLASSES, A RANGE CAN BE CREATED USING A HYPHEN, E.G.:
'[3-6]' AND '[d-g]'

_______________________________________________________________________
INPUT/OUTPUT (I/O):
STANDARD INPUT (stdin OR 0): COMES FROM THE KEYBOARD BY DEFAULT. SINCE EVERYTHING IS REPRESENTED AS A FILE, THIS IS AS WELL, WHICH MAKES THE NUMBER (0) A FILE DESCRIPTOR
STANDARD OUTPUT (stdout OR 1): DISPLAYED TO THE SCREEN. SINCE EVERYTHING IS REPRESENTED AS A FILE, THIS IS AS WELL, WHICH MAKES THE NUMBER (1) A FILE DESCRIPTOR
STANDARD ERROR (stderr OR 2): DISPLAYED TO THE SCREEN. SINCE EVERYTHING IS REPRESENTED AS A FILE, THIS IS AS WELL, WHICH MAKES THE NUMBER (2) A FILE DESCRIPTOR
'<' REDIRECTS STANDARD FROM A FILE TO A COMMAND
'>' REDIRECTS STANDARD OUTPUT TO A FILE, OVERWRITING EXISTING CONTENT. NOTE THAT '1>' IS THE SAME AS '>' (STANDARD OUTPUT IS USED TO REDIRECT BY DEFAULT. WHEN ONE WANTS TO REDIRECT ERRORS, USE '2>', NO SPACES. TO SHOW BOTH, ONE CAN APPEND STANDARD ERRORS TO STANDARD OUTPUT USING '2>&1')
'>>' REDIRECTS STANDARD OUTPUT TO A FILE, APPENDING TO EXISTING CONTENT
'&' IS USED IN COMBINATION WITH FILE DESCRIPTORS
THE NULL-DEVICE IS A SPECIAL FILE THAT THROWS AWAY EVERYTHING THAT IS MOVED INTO IT AND CAN BE FOUND AT /dev/null, CAN BE USED IF ONE WANTS TO OMIT ALL ERRORS, OR ALL STANDARD OUTPUT

COMPARE CONTENT OF FILES AND SEARCH CONTENT OF FILES:
grep [pattern file] (SEARCH FOR PATTERN INSIDE A FILE) [-i (IGNORE CASE)] [-c (COUNT OCCURRENCES IN A FILE)] [-n (PRECEDE LINE NUMBERS)] [-v (PRINT LINES THAT DON'T MATCH: INVERT MATCHING)]
file [file_name] (GIVES INFORMATION WHAT FILE IT IS)
strings [binary_file] (GIVES INFORMATION ON THE CONTENT OF THE BINARY FILE)
[command_one] '|' [command_two] (PIPE OPERATOR, FEEDS OUTPUT OF FIRST COMMAND TO SECOND COMMAND)
cut [file_name] [-d [delimiter] (ACTS AS A SEPARATOR, COMPARABLE TO .split(delimiter) IN PYTHON)] [-f [number_one,...] (AFTER LINES ARE SPLIT BY delimiter, ONE CAN ASK FOR OUTPUT AT THE numbers' POSITIONS)]
diff [file_one file_two] (SHOWS DIFFERENCES BETWEEN FILES; E.G.: OUTPUT WOULD LOOK LIKE 3c3 < line_of_file_one --- >line_of_file_two(line_number_file_one-action-line_number_file_two), WHERE ACTIONS CAN BE a (ADDED), c (CHANGED) AND d (DELETED))
sdiff [file_one file_two] (SHOWS DIFFERENCES BETWEEN FILES, WITH file_one ON THE LEFT AND file_two ON THE RIGHT SIDE OF THE SCREEN. HERE '<'/'>' MEANS THAT THE LINE ONLY APPEARS ON LEFT/RIGHT FILES, THE | MEANS THAT THE LINES BETWEEN THE FILES DIFFER)
vimdiff [file_one file_two] (SHOWS DIFFERENCES BETWEEN FILES IN VIM)