KUBERNETES IS, NEXT TO SWARM, A POPULAR ORCHESTRATOR
IT COMES FROM GOOGLE, AND PUSHES SWARM OUT OF THE MARKET

MANY SERVERS CAN ACT LIKE ONE WITH A CONTAINER/SERVICE ORCHESTRATOR LIKE SWARM OR KUBERNETES
THERE IS ONE MAIN POINT FOR CONTROLLING A SET OF CONTAINERS/SERVICES AND THAT IS KUBE-CONTROL
THERE ARE SOME DIFFERENT VERSIONS/DISTRIBUTIONS OF KUBERNETES THAT CAN FIT THE SPECIFIC REQUIREMENTS OF THE PRODUCTION

ADVANTAGES OF SWARM: EASY TO MAINTAIN AND DEPLOY, IT COMES WITH DOCKER SO THE APPLICATION BECOMES BASED ON A SINGLE VENDOR, SWARM DOES NOT USE MANY RESOURCES SINCE IT IS PART OF DOCKER, IT HAS 20/80 RULE (20% OF FEATURES AS COMPARED TO KUBERNETES FOR 80% OF USE CASES), RUNS WHENEVER DOCKER RUNS SINCE IT IS PART OF DOCKER (WHICH IS ALMOST ANYWHERE NOWADAYS), SECURE, EASIER TO TROUBLESHOOT
ADVANTAGES OF KUBERNETES: FLEXIBLE AND CUSTOMIZABLE, CLOUDS WILL DEPLOY/MANAGE KUBERNETES FOR YOU, WIDEST COMMUNITY, BETTER SUPPORT THAN SWARM (ALSO FROM OTHER VENDORS)

DOCKER CONTAINERS ARE THE CONTAINERS FOR THE BINARIES; DOCKER SWARM IS AN ORCHESTRATOR THAT MANAGES MULTIPLE CONTAINERS OVER MULTIPLE MACHINES OR NODES (USES SERVICES); DOCKER STACKS TAKE THOSE SERVICES (CAN BE MANY) AND TRY TO MANAGE IT THEMSELVES (ALWAYS TRY TO MAINTAIN THOSE SERVICES, WHEREAS SERVICES TRY TO RUN AND IF THEY FAIL TO RUN, THAT'S IT)

KUBERNETES REFERS TO THE WHOLE ORCHESTRATION SYSTEM
KUBERNETES IS OFTEN ABBREVIATED AS K8s (SINCE 'UBERNETE' IS 8 LETTERS) OR KUBE
KUBECTL (KUBE CONTROL) IS THE COMMAND LINE INTERFACE FOR KUBERNETES
NODES REFER TO SINGLE ENTITIES, WHICH IS CONSISTENT WITH THE TERMINOLOGY IN SWARM
KUBELET IS THE AGENT THAT RUNS ON THE NODES THAT ALLOW THE NODE TO BECOME PART OF A KUBERNETES CLUSTER
CONTROL PLANE IS THE SET OF MANAGERS/MASTERS, IN SWARM IT IS THE SET OF FEATURES CONTROLLING SECURE COMMUNICATION IN THE NETWORK AND THE RAFT DATABASE 
NON-MANAGERS/NON-MASTERS ARE (WORKER) NODES, SO THIS IS CONSISTENT WITH SWARM
SWARM USES THE RAFT DATABASE, KUBERNETES USES ETCD (AS CONTAINER)
LIKEWISE AN API AND A SCHEDULER AND A CONTROLLER MANAGER (MANAGES THE WHOLE CLUSTER, INVESTIGATES THE DISCREPANCY OF THE ACTUAL STATE AND THE STATE IT IS TRYING TO ACHIEVE) ARE RUN AS A CONTAINER ON THE MASTER NODE(S)
KUBELETS AND KUBE-PROXY ARE NEEDED ON EVERY NODE FOR THE COMMUNICATION IN A KUBERNETES CLUSTER
CONTAINERS ARE GROUPED TOGETHER ON NODES IN PODS IN KUBERNETES; COMPARABLE TO SERVICES IN SWARM
CONTROLLERS ARE TOGETHER WITH PODS AND ARE COMPARABLE TO STACKS, THAT IS: CONTROLLER MANAGES THAT THE PODS KEEP FUNCTIONING AS MEANT TO
THERE ARE DIFFERENT KINDS OF CONTROLLERS IN KUBERNETES: DEPLOYMENT, REPLICASET, STATEFULSET, DAEMONSET, JOB, CRONJOB AND THIRD-PARTY CONTROLLERS
A SERVICE IN KUBERNETES IS A SPECIFIC NETWORK ENDPOINT FOR A SET OF PODS (COMPARABLE TO A DNS FOR A 'SERVICE' IN SWARM)

THE ORDER OF OBJECTS IN KUBERETES IS: PODS (COMPARABLE TO TASKS), REPLICASET (COMPARABLE TO SERVICES) AND DEPLOYMENT (COMPARABLE TO STACKS)

FOR INSTALLATION, THERE ARE SLIGHTLY DIFFERENT INSTALLATIONS FOR WINDOWS (MINIKUBE) OR LINUX (MICROK8S)
ALSO ONLINE THERE ARE TWO OPTIONS: PLAY-WITH-K8S AND KATACODA
PREFERRED WAY LOCALLY IS DOCKER DESKTOP, SINCE KUBECTL IS INCLUDED AND KUBERNETES GETS THE SETTINGS OF LOCAL DOCKER INSTALLATION AUTOMATICALLY (IOS AND WINDOWS)

THERE IS A DIFFERENCE BETWEEN IMPERATIVE AND DECLARATIVE KUBERNETES OR SWARM USAGE: IMPERATIVE IS IMPERATIVE (DO THIS; EASY TO THINK THROUGH, HARDER TO AUTOMATE) AND DECLARATIVE (PROLOG-STYLE, END-GOAL IS WRITTEN, NOT THE ACTIONS; HARDER TO THINK THROUGH, EASIER TO AUTOMATE)
THE DECLARATIVE STYLE IS BASED ON YAML-FILES OR SCRIPTS WHERE THE END-GOALS ARE WRITTEN UP; THIS ENABLES PROGRESS-TRACKING DIRECTLY BY PUTTING SCRIPTS ON GIT
DECLARATIVE IS RECOMMENDED FOR THE LONGER TERM AND BIGGER PROJECTS
