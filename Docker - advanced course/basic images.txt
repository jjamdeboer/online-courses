THE BINARIES AND DEPENDENCIES ARE IN AN IMAGE, NEXT TO METADATA ON THE IMAGE AND HOW TO RUN IT
HOWEVER, THE OPERATING SYSTEM/KERNEL IS PROVIDED BY THE HOST, SO THE IMAGE CONTAINS ONLY THE BINARIES AND ITS DEPENDENCIES
DOCKER HUB IS QUITE SIMILAR TO GITHUB OR TO THE APT PACKAGE REPOSITORY
IMAGES ARE CREATED USING THE UNION/ONION LAYER CONCEPT OF MAKING LAYERS OF CHANGES, MEANING THAT PROGRAMS NEEDING ANOTHER PROGRAM THAT HAS ALREADY BEEN DOWNLOADED, USE THAT BINARY THEN AS WELL
TO INSPECT THOSE LAYERS: 'docker image history [IMAGE TO BE INSPECTED]'
TO INSPECT THE METADATA IN THE IMAGE: 'docker image inspect [IMAGE TO BE INSPECTED]'
TO BASIS LAYER OF AN IMAGE IS CALLED 'SCRATCH' AND IS EMPTY; ALL ADDITIONAL CHANGES ARE ON TOP OF THAT
ALL IMAGE LAYERS ARE STORED ONLY ONCE; WHEN USED APPROPRIATELY, THE CHANGES ARE ALSO MADE ON TOP LAYERS, SO THAT THE BIG BOTTOM LAYERS DON'T NEED TO BE DOWNLOADED AGAIN

A CONTAINER IS AN (INTERACTIVE) READ/WRITE-LAYER ON TOP OF AN IMAGE, SO THE MOST TOP LAYER ADDED TO AN IMAGE
CONTAINERS CAN CHANGE FILES WHILE RUNNING (COPY ON WRITE), BUT THAT DOESN'T CHANGE THE IMAGE, ONLY AFFECTS THE CONTAINER; ALL CHANGES TO THE IMAGE DO AFFECT ALL CORRESPONDING CONTAINERS, NATURALLY

IMAGES DO NOT HAVE A NAME, BUT HAVE A REPOSITORY (WHICH IS WHAT THEY ARE USUALLY REFERRED TO AS, SUCH AS: MYSQL), A TAG (VERSION/POINTERS TO IMAGE ID'S) AND AN ID
MULTIPLE TAGS CAN REFER TO THE SAME ID
AN IMAGE CAN BE TAGGED, SO WHEN ONE IS PULLED, THAT SPECIFIC TAGGED IMAGE IS PULLED, USING: 'docker image tag [TAG NAME] [IMAGE TO BE TAGGED]
TO LOG IN INTO THE DOCKER HUB (DEFAULT) OR OTHER REPOSITORY: 'docker login [REPOSITORY]'
ALWAYS LOG OUT AFTERWARDS, ESPECIALLY ON MACHINE THAT ARE NOT COMPLETELY TRUSTED, TO PROTECT THE ACCOUNT: 'docker logout'

THE DOCKER ARCHITECTURE ON ANOTHER LEVEL IS: THE CLIENT (WHICH PULLS, BUILDS AND RUNS) - THE DOCKER DAEMON (WHERE CONTAINERS AND IMAGES ARE) - THE REGISTRY
REQUESTS ARE MADE FROM THE CLIENT TO THE DAEMON, THAT CHECKS WHETHER EVERYTHING NECESSARY IS THERE AND THEN RUN/BUILD/PULLS THE CORRESPONDING IMAGES

ON TOP OF THE DOCKERFILE (WHICH IS USED TO BUILD AN IMAGE), IT IS SPECIFIED WHAT BASIC OPERATING SYSTEM THE IMAGE IS BASED ON: 'FROM [OPERATING SYSTEM]:[VERSION]'
AFTER THIS, ENVIRONMENT VARIABLES ARE USED (SUCH AS VERSIONS OF OTHER PROGRAMMES THAT ARE GOING TO BE INCLUDED IN THE IMAGE)
TO GET THE VALUE OF THIS VARIABLE, USE, LIKE BASH: '${[VARIABLE NAME]}'
EACH SENTENCE IS A LAYER IN THE DOCKER IMAGE
TO LINK MULTIPLE LINES INTO THE SAME LAYER (LINE BREAK), USE '&&'
BY DEFAULT THERE ARE NO PORTS AVAILABLE FOR POSSIBLE CONNECTIONS OVER THE NETWORK, PORTS CAN BE RESERVED BY: 'EXPOSE [PORT NUMBERS]'; THESE PORTS STILL NEED TO EXPLICITLY OPENED WHEN CREATING THE CONTAINER
IT IS COMMON TO EXECUTE (LOCAL) SHELL COMMANDS IN THE CONTAINER AS IT IS BEING BUILT (FOR EXAMPLE, TO INSTALL SOMETHING WITH A PACKAGE MANAGER)
THE LAST COMMAND IN THE DOCKERFILE IS: 'CMD [LIST OF COMMANDS THAT ARE RUN WHEN CONTAINER IS STARTED OR RERUN]'; ONLY LAST 'CMD' IS EXECUTED
WHEN A LINE IN THE DOCKERFILE CHANGES, THE LINES AFTER THOSE CHANGES NEED TO BE RERUN AS WELL WHEN AN IMAGE IS BUILT
ONCE A DOCKERFILE IS UP TO TASTE, IT CAN BE PUT ON DOCKERHUB WITH: 'docker push [USERNAME ON DOCKERHUB]/[REPOSITORY NAME]:[TAG]'

TO SEE THE TOTAL SPACE DOCKER IS TAKING UP: 'docker system df'
TO CLEAN UP UNUSED IMAGES OR CONTAINER: 'docker image prune' OR 'docker system prune'
