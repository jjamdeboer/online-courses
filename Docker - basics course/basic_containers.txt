CONTAINERS ARE GROUP OF PROCESSES RUN IN ISOLATION, BUT MUST BE ABLE TO RUN ON A SHARED KERNEL
ISOLATION IS PROVIDED BY LINUX NAMESPACES AND EACH CONTAINER HAS OWN SET OF NAMESPACES: PID (PROCESS ID), USER (USER AND GROUP ID'S), UTS (HOST NAME AND DOMAIN NAME), NS (MOUNT POINTS), NET (NETWORK DEVICES, STACKS AND PORTS), IPC (INTER-PROCESS COMMUNICATIONS)
ANOTHER FEATURE OF THE KERNEL, CGROUPS, MONITORS AND CONTROLS RESOURCES FOR EACH CONTAINER

VIRTUAL MACHINE VERSUS CONTAINER: VIRTUAL MACHINE HAVE FULL-BLOWN OPERATING SYSTEM, WHEREAS MULTIPLE CONTAINERS (PROCESSES) CAN SHARE SAME KERNEL
CONTAINERS ARE FASTER AND MORE LIGHTWEIGHT THAN VIRTUAL MACHINES
CONTAINERS CAN BE RUN ON TOP OF VIRTUAL MACHINE AND, THUS, ARE NOT A REPLACEMENT

DOCKER IS TOOLING TO MANAGE CONTAINERS, SIMPLIFYING USE FOR MASSES; PACKAGE DEPENDENCIES WITH CONTAINERS, SO THAT ONCE BUILT THESE CAN BE ANYWHERE RUN

CONTAINERS ARE APPEALING: NO MORE "BUT IT RUN ON MY MACHINE", WHEN SHIPPED TO DIFFERENT ENVIRONMENT, ALL DEPENDENCIES SHOULD STILL BE THERE AND IT SHOULD, THUS WORK THE SAME WAY (NO ENVIRONMENTAL DRIFT, WHICH HAPPENS WITH LONG EXISTING SYSTEMS), SHIP UPDATES TO NEW ENVIRONMENT; LIGHTWEIGHT AND FAST; BETTER RESOURCE UTILIZATION; STANDARD DEVELOPER TO OPERATIONS INTERFACE; HEALTHY ECOSYSTEM AND TOOLING
